package com.example.quickscanr;

import static androidx.test.espresso.Espresso.onView;
import static androidx.test.espresso.action.ViewActions.click;
import static androidx.test.espresso.action.ViewActions.scrollTo;
import static androidx.test.espresso.matcher.ViewMatchers.hasDescendant;
import static androidx.test.espresso.matcher.ViewMatchers.withId;
import static androidx.test.espresso.matcher.ViewMatchers.withText;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertEquals;

import android.util.Log;
import android.view.View;
import android.widget.TextView;

import androidx.test.core.app.ActivityScenario;



import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import androidx.test.core.app.ActivityScenario;
import androidx.test.espresso.contrib.RecyclerViewActions;
import androidx.test.espresso.matcher.ViewMatchers;
import androidx.test.ext.junit.rules.ActivityScenarioRule;
import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.LargeTest;
import androidx.test.platform.app.InstrumentationRegistry;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject;
import androidx.test.uiautomator.UiObjectNotFoundException;
import androidx.test.uiautomator.UiScrollable;
import androidx.test.uiautomator.UiSelector;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.QueryDocumentSnapshot;
import com.google.firebase.firestore.QuerySnapshot;


import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RunWith(AndroidJUnit4.class)
@LargeTest

/**
 * tests admin delete functions
 * referenced https://stackoverflow.com/questions/34439072/espresso-click-on-the-button-of-the-dialog
 *      for allowing permissions to be automatic
 */
public class AdminDeleteTest {
    @Rule
    public ActivityScenarioRule<MainActivity> scenario = new ActivityScenarioRule<MainActivity>(MainActivity.class);

    private static boolean userSet = false;

    FirebaseFirestore db = FirebaseFirestore.getInstance();

    private static String testEventId;
    private static String testImgId;
    private static String testUserId;
    private static String imgUserId;

    private static String testEventName;
    private static String testUserName;



    /**
     * Uses UIAutomator to allow permissions on startup
     */
    private static void allowPermissionsIfNeeded() {
        UiDevice device = UiDevice.getInstance(getInstrumentation());
        // for notifications
        UiObject allowButton = device.findObject(new UiSelector()
                .className("android.widget.Button")
                .textContains("Allow"));

        // for camera perms
        UiObject whileButton = device.findObject(new UiSelector()
                .className("android.widget.Button")
                .textContains("While using the app"));

        // look for While using the app for 1s
        if (whileButton.waitForExists(1000)) {
            try {
                whileButton.click();
            } catch (Exception e) {
                Log.d("PERMS", "Failed to allow camera permissions for testing");
            }
        }

        // look for While using the app for 1s
        if (whileButton.waitForExists(1000)) {
            try {
                whileButton.click();
            } catch (Exception e) {
                Log.d("PERMS", "Failed to allow location permissions for testing");
            }
        }

        // look for Allow for 1s
        if (allowButton.waitForExists(1000)) {
            try {
                allowButton.click();
            } catch (Exception e) {
                Log.d("PERMS", "Failed to allow notification permissions for testing");
            }
        }
    }

    /**
     * set user to admin
     */
    @Before
    public void setUp() {
        // only setup once
        if (!userSet) {
            allowPermissionsIfNeeded();
            try {
                Thread.sleep(5000L);    // let database setup
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            // go to profile
            try {
                onView(withId(R.id.nav_ad_profile_btn)).perform(click());
            } catch (Exception e) {
                try {
                    onView(withId(R.id.nav_o_profile_btn)).perform(click());
                } catch (Exception e1) {
                    try {
                        onView(withId(R.id.nav_a_profile_btn)).perform(click());
                    } catch (Exception e2) {}
                }
            }
            // edit current user type to be admin
            onView(withId(R.id.user_edit_profile)).perform(click());
            onView(withId(R.id.edit_profile_usertype)).perform(click());
            onView(withText(UserType.getString(UserType.ADMIN))).perform(click());
            onView(withId(R.id.save_profile_btn)).perform(click());
            userSet = true;
        }

        try {
            Thread.sleep(3000L);    // give 3 second between tests to be safe
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * add an event for testing
     */
    @Before
    public void addTestEvent() {
        testImgId = String.format("default_test (%s)", System.currentTimeMillis());
        testEventName = String.format("Test Admin Event(%s)", System.currentTimeMillis());
        // add the test event data to the db
        Map<String, Object> data = new HashMap<>();
        data.put(DatabaseConstants.evNameKey, testEventName);
        data.put(DatabaseConstants.evDescKey, "Event Description");
        data.put(DatabaseConstants.evLocNameKey, "Location");
        data.put(DatabaseConstants.evStartKey, "26-03-2024");
        data.put(DatabaseConstants.evEndKey, "26-03-2024");
        data.put(DatabaseConstants.evRestricKey, "Restrictions");
        data.put(DatabaseConstants.evTimestampKey, System.currentTimeMillis());
        data.put(DatabaseConstants.evPosterKey, testImgId);
        data.put(DatabaseConstants.evAttendeeLimitKey, -1);
        data.put(DatabaseConstants.evOwnerKey, MainActivity.user.getUserId());

        db.collection(DatabaseConstants.eventColName).add(data).addOnCompleteListener(new OnCompleteListener<DocumentReference>() {
            @Override
            public void onComplete(@NonNull Task<DocumentReference> task) {
                if (task.isSuccessful()) {
                    DocumentReference documentReference = task.getResult();
                    if (documentReference != null) {
                        testEventId = documentReference.getId();
                    }
                }
            }
        });

        Map<String, Object> dataImg = new HashMap<>();
        dataImg.put(DatabaseConstants.imgDataKey, "
        db.collection("images").document(testImgId).set(dataImg);

        try {
            Thread.sleep(5000L);    // give 5 second between tests to be safe
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

    }

    /**
     * add a user for testing
     */
    @Before
    public void addTestUser(){
        imgUserId = String.format("default_user_test (%s)", System.currentTimeMillis());
        testUserName = String.format("Test Person (%s)", System.currentTimeMillis());
        Map<String, Object> dataUser = new HashMap<>();
        dataUser.put(DatabaseConstants.userFullNameKey, testUserName);
        dataUser.put(DatabaseConstants.userHomePageKey, "www.g.com");
        dataUser.put(DatabaseConstants.userImageKey, imgUserId);
        dataUser.put(DatabaseConstants.userGeoLocKey, true);
        dataUser.put(DatabaseConstants.userTypeKey, UserType.ATTENDEE);
        dataUser.put(DatabaseConstants.userEmailKey, "test@email.com");
        dataUser.put(DatabaseConstants.userPhoneKey, "1-800-test");
        dataUser.put(DatabaseConstants.userCheckedEventsKey, new ArrayList<String>());
        dataUser.put(DatabaseConstants.userSignedUpEventsKey, new ArrayList<String>());
        dataUser.put(DatabaseConstants.userFcmToken, MainActivity.user.getFcmToken());

        db.collection(DatabaseConstants.usersColName).add(dataUser).addOnCompleteListener(new OnCompleteListener<DocumentReference>() {
            @Override
            public void onComplete(@NonNull Task<DocumentReference> task) {
                if (task.isSuccessful()) {
                    DocumentReference documentReference = task.getResult();
                    if (documentReference != null) {
                        testUserId = documentReference.getId();

                        Map<String, Object> dataImgUser = new HashMap<>();
                        dataImgUser.put(DatabaseConstants.imgDataKey, "");
                        db.collection(DatabaseConstants.imgColName).document(imgUserId).set(dataImgUser);
                    }
                }
            }
        });

        try {
            Thread.sleep(6000L);    // give 5 second between tests to be safe
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * make sure for sure that everything was removed
     */
    @After
    public void tearDown() {
        if (testEventId != null) {
            db.collection(DatabaseConstants.eventColName).document(testEventId).delete();
            db.collection(DatabaseConstants.imgColName).document(testImgId).delete();
            testEventId = null;
            testImgId = null;
        }
        if (testUserId != null) {
            db.collection(DatabaseConstants.usersColName).document(testUserId).delete();
            db.collection(DatabaseConstants.imgColName).document(imgUserId).delete();
            testUserId = null;
            imgUserId = null;
        }
        if (imgUserId != null) {
            db.collection(DatabaseConstants.imgColName).document(imgUserId).delete();
            imgUserId = null;
        }
    }


    /**
     * test delete event functionality
     * @throws UiObjectNotFoundException
     */
    @Test
    public void deleteEvent() throws UiObjectNotFoundException {
        //go to the event list
        onView(withId(R.id.nav_ad_events_btn)).perform(click());

        //wait to get everything loaded
        try {
            Thread.sleep(5000L);    // give 5 second between tests to be safe
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        //use this to scroll as animations are causing errors
        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
        UiScrollable scroll = new UiScrollable(new UiSelector().scrollable(true).className("android.widget.ScrollView"));
        scroll.setAsVerticalList();

        UiSelector selector = new UiSelector().text(testEventName);
        scroll.scrollIntoView(selector);
        UiObject eventToClick = device.findObject(selector);

        if (eventToClick.exists()) {
            eventToClick.click();

            try {
                Thread.sleep(5000L);    // give 5 second between tests to be safe
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

            //click the delete button
            onView(withId(R.id.delete_btn)).perform(click());

            try {
                Thread.sleep(7000L);    // give 5 second between tests to be safe
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
//
            final boolean[] eventDeleted = {false};
//
            // verify that it was actually deleted from db
            db.collection(DatabaseConstants.eventColName).document(testEventId).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                @Override
                public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                    DocumentSnapshot documentSnapshot = task.getResult();
                    if(!documentSnapshot.exists()){
                        eventDeleted[0] = true;
                        testEventId = null;
                    }
                }
            });

            try {
                Thread.sleep(5000L);    // give 5 second between tests to be safe
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

            assertEquals(eventDeleted[0], true);

            try {
                Thread.sleep(5000L);    // give 5 second between tests to be safe
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

    }

    /**
     * test delete user functionality
     */
    @Test
    public void deleteUser() throws UiObjectNotFoundException {

        onView(withId(R.id.nav_ad_users_btn)).perform(click());

        //wait to get everything loaded
        try {
            Thread.sleep(5000L);    // give 5 second between tests to be safe
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        //use this to scroll as animations are causing errors
        UiDevice device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
        UiScrollable scroll = new UiScrollable(new UiSelector().scrollable(true).className("android.widget.ScrollView"));
        scroll.setAsVerticalList();

        UiSelector selector = new UiSelector().text(testUserName);
        scroll.scrollIntoView(selector);
        UiObject eventToClick = device.findObject(selector);

        if (eventToClick.exists()) {
            eventToClick.click();
//
            //click the delete button
            onView(withId(R.id.delete_btn)).perform(click());

            try {
                Thread.sleep(5000L);    // give 5 second between tests to be safe
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

            final boolean[] userDeleted = {false};

            // verify that it was actually deleted from db
            db.collection(DatabaseConstants.usersColName).document(testUserId).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                @Override
                public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                    DocumentSnapshot documentSnapshot = task.getResult();
                    if(!documentSnapshot.exists()){
                        userDeleted[0] = true;
                        testUserId = null;
                    }
                }
            });

            try {
                Thread.sleep(5000L);    // give 5 second between tests to be safe
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

            assertEquals(userDeleted[0], true);
        }

    }


}